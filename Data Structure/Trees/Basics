import java.util.*;
public class trees
{
   public static class Node
   {
        int data;
        Node left;
        Node right; 
        public Node(int data)
        {
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    public static void preorder(Node root)
    {
        if(root==null)
        {
            return;
        }
        else
        {
            System.out.print(root.data+" ");
            preorder(root.left);
            preorder(root.right);
        }
    }
    public static void inorder(Node root)
    {
        if(root==null)
        {
            return;
        }
        else
        {
            inorder(root.left);
            System.out.print(root.data+" ");
            inorder(root.right);
        }
    }
    public static void postorder(Node root)
    {
        if(root==null)
        {
            return;
        }
        else
        {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.data+" ");
        }
    }
    public static void it_preorder(Node root)
    {
        List<Integer>preorder=new ArrayList<>();
        Stack<Node>st=new Stack<Node>();
        st.push(root);
        while(!st.isEmpty())
        {
            root=st.pop();
            System.out.print(root.data);
            if(root.right!=null)
            {
                st.push(root.right);
            }
            if(root.left!=null)
            {
                 st.push(root.left);
            }
        }
    }
    public static void levelordertraversal(Node root)
    {
        if(root==null)
        {
            return;
        }
        else
        {
            Queue<Node>q=new LinkedList<>();
            q.add(root);
            q.add(null);
            while(!q.isEmpty())
            {
                Node cur=q.remove();
                if(cur==null)
                {
                    System.out.println();
                    if(q.isEmpty())
                    {
                        break;
                    }
                    else
                    {
                        q.add(null);
                    }
                }
                else
                {   System.out.print(cur.data+" ");
                    if(cur.left!=null)
                    {
                        q.add(cur.left);
                    }
                    if(cur.right!=null)
                    {
                        q.add(cur.right);
                    }
                }
            }
        }
    }
    public static void main(String[]args)
    {
        /*              1
         *            /  \
         *           2    3
         *          / \  / \
         *         4   5 6  7 
         */
        Node root=new Node(1);
        root.left=new Node(2);
        root.right=new Node(3);
        root.left.left=new Node(4);
        root.left.right=new Node(5);
        root.right.left=new Node(6);
        root.right.right=new Node(7);
        //levelordertraversal(root);
        it_preorder(root);
        System.out.println();
        //preorder(root);
    }
}
