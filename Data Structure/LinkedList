
public class LinkedList
{
    public static class Node
    {
        int data;
        Node next;
        public Node(int data)
        {
            this.data=data;
            this.next=null;
        }
    }
    public void addFirst(int data)
    {
        Node newNode=new Node(data);
        size++;
        if(head==null)
        {
            head=tail=newNode;
            return;//or else head will point itself and infinite loop will run
        }
        newNode.next=head;
        head=newNode;
    }
    public void addLast(int data)
    {
        Node newNode=new Node(data);
        size++;
        if(head==null)
        {
            head=tail=newNode;
        }
        tail.next=newNode;
        tail=newNode;
    }
    public void addindx(int data,int index)
    {
        Node newNode=new Node(data);
        Node temp=head;
        int i=0;
        if(index==0)
        {
            addFirst(data);
        }
         size++;
        while(i<index-1)
        {
            temp=temp.next;
            i++;
        }
        newNode.next=temp.next;
        temp.next=newNode;
    }
    public int removeFirst()
    {
        if(size==0)
        {
            System.out.println("Linkedlist Empty");
            return Integer.MIN_VALUE;
        }
        else if(size==1)
        {
            int val=head.data;
            head=tail=null;
            size=0;
            return val;
        }
        int val=head.data;
        head=head.next;
         size
        return val;
    }
    public int removelast()
    {
        if(size==0)
        {
            System.out.println("Linkedlist Empty");
            return Integer.MIN_VALUE;
        }
        else if(size==1)
        {
            int val=head.data;
            head=tail=null;
            size--;
            return val;
        }
        Node temp;
        //prev: i=size-2
        for(temp=head;temp.next.next!=null;temp=temp.next);
        int val=temp.next.data;
        temp.next=null;
        tail=temp;
        size--;
        return val;
    }
    public void printList()
    {
        if(head==null)
        {
            System.out.println("Linkedlist Empty");
        }
        Node temp=head;
        for(temp=head;temp!=null;temp=temp.next)
        {
             System.out.print(temp.data+"->");
        }
         System.out.println("null");
    }
    public int itrsearch(int key)
    {
        int i=0;
        Node temp=head;
        while(temp!=null)
        {
            if(temp.data==key)
            {
                return i;
            }
            temp=temp.next;
            i++;
        }
        return -1;
    }
    public void deleteNthfromEnd(int idx)
    {
        if(idx==size)
        {
            head=head.next;
        }
        int i=1;
        //size-idx+1=>node to be deleted
        int pos=size-idx;//prev of target node
        Node temp=head;
        while(i<pos)
        {
            temp=temp.next;
            i++;
        }
        temp.next=temp.next.next;
    }
    public int helper(Node head,int key)
    {
        if(head== null)
        {
            return -1;
        }
        if(head.data==key)
        {
            return 0;
        }
        int idx=helper(head.next,key);
        if(idx==-1)
        {
            return -1;
        }
        return idx+1;
    }
    public int recsearch(int key)
    {
        return helper(head,key);
    }
    public Node findMid(Node head)
    {
        Node slow=head;
        Node fast=head;
        while(fast!=null&&fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public boolean checkPalindrome()
    {
        if(head==null||head.next==null)
        {
            return true;
        }
        Node midNode=findMid(head);
        Node prev=null;
        Node cur=midNode;
        Node next;
        while(cur!=null)
        {
            next=cur.next;
            cur.next=prev;
            prev=cur;
            cur=next;
        }
        Node right=prev;//right half head
        Node left=head;
        //check left half and right half
        while(right!=null)
        {
            if(left.data!=right.data)
            {
                return false;
            }
            left=left.next;
            right=right.next;
        }
         return true;
     }
            
    public void reverse()
    {
        Node prv=null;
        Node next;
        Node cur=head;
        while(cur!=null)
        {
            next=cur.next;
            cur.next=prv;
            prv=cur;
            cur=next;
        }
        head=prv;
    }
    public static Node head,tail;
    public static int size;
    public static void main(String[]args)
    {
        LinkedList ll=new LinkedList();
        ll.addFirst(10);
        ll.addFirst(20); 
        ll.addLast(4); 
        ll.printList();
        ll.addindx(50,2);
        ll.printList();
        ll.removelast();
        System.out.println(ll.itrsearch(3));
        System.out.println(ll.recsearch(20));
        ll.reverse();
        ll.printList();
        /*ll.addLast(1); 
        ll.addLast(2); 
        ll.addLast(2); 
        ll.addLast(1); 
        ll.printList();*/
         System.out.println(ll.checkPalindrome());
    }
}
