package Sorting;
import java.util.*;
public class CountSort {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the size of the array");
        int n=sc.nextInt();
        int arr[]=new int[n];

        System.out.println("Enter the elements of the array");
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        int res[]=CountingSort(arr);
        System.out.println("The array elements after Sorting : ");
        for(int i=0;i<n;i++)
        {
           System.out.print5(res[i]+" ");
        }
    }
    public static int[] CountingSort(int arr[])
    {
        int n=arr.length;
        int max=Integer.MIN_VALUE;
        int res[]=new int[n];
        for(int i=0;i<n;i++)
        {
            max=Math.max(arr[i],max);
        }
        if(max==Integer.MIN_VALUE)
        {
            System.out.println("Empty Array");
            return res;
        }
        int count[]=new int[max+1];
        //Calculating the frequency
        for(int i=0;i<n;i++)
        {
            count[arr[i]]++;
        }
        //find cumulative frequency
        for(int i=1;i<=max;i++) {
            count[i] += count[i - 1];
        }
        //Advantage of cumulative frequency is that we need to traverse n times
        //and traversing from back maintains Stable sort(Relative Order of duplicate elements remain same
        for(int i=n-1;i>=0;i--)
        {
            int val=arr[i];
            int pos=--count[val];
            res[pos]=val;
        }
        return res;
    }
}
